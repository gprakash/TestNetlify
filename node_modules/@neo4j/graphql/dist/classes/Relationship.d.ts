import type { PrimitiveField, PointField, CustomEnumField, CypherField, CustomScalarField, BaseField, TemporalField } from "../types";
export interface RelationshipConstructor {
    name: string;
    type: string;
    description?: string;
    properties?: string;
    cypherFields?: CypherField[];
    primitiveFields?: PrimitiveField[];
    scalarFields?: CustomScalarField[];
    enumFields?: CustomEnumField[];
    temporalFields?: TemporalField[];
    pointFields?: PointField[];
    ignoredFields?: BaseField[];
}
declare class Relationship {
    name: string;
    type: string;
    description?: string;
    properties?: string;
    primitiveFields: PrimitiveField[];
    scalarFields: CustomScalarField[];
    enumFields: CustomEnumField[];
    temporalFields: TemporalField[];
    pointFields: PointField[];
    ignoredFields: BaseField[];
    constructor(input: RelationshipConstructor);
}
export default Relationship;
//# sourceMappingURL=Relationship.d.ts.map