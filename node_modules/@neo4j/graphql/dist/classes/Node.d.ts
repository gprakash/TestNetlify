import { DirectiveNode, NamedTypeNode } from "graphql";
import type { RelationField, ConnectionField, CypherField, PrimitiveField, CustomEnumField, CustomScalarField, UnionField, InterfaceField, ObjectField, TemporalField, PointField, Auth, BaseField } from "../types";
import Exclude from "./Exclude";
import NodeDirective from "./NodeDirective";
export interface NodeConstructor {
    name: string;
    relationFields: RelationField[];
    connectionFields: ConnectionField[];
    cypherFields: CypherField[];
    primitiveFields: PrimitiveField[];
    scalarFields: CustomScalarField[];
    enumFields: CustomEnumField[];
    otherDirectives: DirectiveNode[];
    unionFields: UnionField[];
    interfaceFields: InterfaceField[];
    interfaces: NamedTypeNode[];
    objectFields: ObjectField[];
    temporalFields: TemporalField[];
    pointFields: PointField[];
    ignoredFields: BaseField[];
    auth?: Auth;
    exclude?: Exclude;
    nodeDirective?: NodeDirective;
    description?: string;
}
declare class Node {
    name: string;
    relationFields: RelationField[];
    connectionFields: ConnectionField[];
    cypherFields: CypherField[];
    primitiveFields: PrimitiveField[];
    scalarFields: CustomScalarField[];
    enumFields: CustomEnumField[];
    otherDirectives: DirectiveNode[];
    unionFields: UnionField[];
    interfaceFields: InterfaceField[];
    interfaces: NamedTypeNode[];
    objectFields: ObjectField[];
    temporalFields: TemporalField[];
    pointFields: PointField[];
    ignoredFields: BaseField[];
    exclude?: Exclude;
    nodeDirective?: NodeDirective;
    auth?: Auth;
    description?: string;
    authableFields: (PrimitiveField | CustomScalarField | CustomEnumField | UnionField | ObjectField | TemporalField | PointField | CypherField)[];
    mutableFields: (PrimitiveField | CustomScalarField | CustomEnumField | UnionField | ObjectField | TemporalField | PointField)[];
    constructor(input: NodeConstructor);
    get labelString(): string;
    get labels(): string[];
    getPlural(options: {
        camelCase: boolean;
    }): string;
}
export default Node;
//# sourceMappingURL=Node.d.ts.map