"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const executeMock = jest.fn();
/* eslint-disable import/first */
const count_1 = __importDefault(require("./count"));
const test_1 = require("../../utils/test");
/* eslint-enable import/first */
jest.mock("../../translate", () => {
    return {
        translateCount: () => [],
    };
});
jest.mock("../../utils", () => {
    return {
        execute: executeMock,
    };
});
describe("Count resolver", () => {
    test("should return the correct; type, args and resolve", () => {
        const node = new test_1.NodeBuilder({
            name: "Movie",
        }).instance();
        const result = count_1.default({ node });
        expect(result.type).toEqual("Int!");
        expect(result.resolve).toBeInstanceOf(Function);
        expect(result.args).toMatchObject({
            where: "MovieWhere",
        });
    });
    test("should resolve correctly for a plain number", () => __awaiter(void 0, void 0, void 0, function* () {
        const node = new test_1.NodeBuilder({
            name: "Movie",
        }).instance();
        const result = count_1.default({ node });
        executeMock.mockReturnValue({
            result: {
                records: [
                    {
                        get: () => 42,
                    },
                ],
            },
        });
        const foo = yield result.resolve(null, null, "mockContext");
        expect(foo).toBe(42);
    }));
    test("should resolve correctly for a Neo4j Integer", () => __awaiter(void 0, void 0, void 0, function* () {
        const node = new test_1.NodeBuilder({
            name: "Movie",
        }).instance();
        const result = count_1.default({ node });
        executeMock.mockReturnValue({
            result: {
                records: [
                    {
                        get: () => 43,
                    },
                ],
            },
        });
        const foo = yield result.resolve(null, null, "mockContext");
        expect(foo).toBe(43);
    }));
});
//# sourceMappingURL=count.test.js.map