"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const parse_node_directive_1 = __importDefault(require("./parse-node-directive"));
const NodeDirective_1 = __importDefault(require("../classes/NodeDirective"));
describe("parseNodeDirective", () => {
    test("should throw an error if incorrect directive is passed in", () => {
        const typeDefs = `
            type TestType @wrongdirective {
                label: String
            }
        `;
        // @ts-ignore
        const directive = graphql_1.parse(typeDefs).definitions[0].directives[0];
        expect(() => parse_node_directive_1.default(directive)).toThrow("Undefined or incorrect directive passed into parseNodeDirective function");
    });
    test("should return a node directive with a label", () => {
        const typeDefs = `
            type TestType @node(label:"MyLabel") {
                name: String
            }
        `;
        // @ts-ignore
        const directive = graphql_1.parse(typeDefs).definitions[0].directives[0];
        const expected = new NodeDirective_1.default({ label: "MyLabel" });
        expect(parse_node_directive_1.default(directive)).toMatchObject(expected);
    });
    test("should return a node directive with additional labels", () => {
        const typeDefs = `
            type TestType @node(additionalLabels:["Label", "AnotherLabel"]) {
                name: String
            }
        `;
        // @ts-ignore
        const directive = graphql_1.parse(typeDefs).definitions[0].directives[0];
        const expected = new NodeDirective_1.default({ additionalLabels: ["Label", "AnotherLabel"] });
        expect(parse_node_directive_1.default(directive)).toMatchObject(expected);
    });
    test("should return a node directive with a label and additional labels", () => {
        const typeDefs = `
            type TestType @node(label:"MyLabel", additionalLabels:["Label", "AnotherLabel"]) {
                name: String
            }
        `;
        // @ts-ignore
        const directive = graphql_1.parse(typeDefs).definitions[0].directives[0];
        const expected = new NodeDirective_1.default({ label: "MyLabel", additionalLabels: ["Label", "AnotherLabel"] });
        expect(parse_node_directive_1.default(directive)).toMatchObject(expected);
    });
    test("should return a node directive with custom plural", () => {
        const typeDefs = `
            type TestType @node(plural: "testTypes") {
                name: String
            }
        `;
        // @ts-ignore
        const directive = graphql_1.parse(typeDefs).definitions[0].directives[0];
        const expected = new NodeDirective_1.default({ plural: "testTypes" });
        expect(parse_node_directive_1.default(directive)).toMatchObject(expected);
    });
});
//# sourceMappingURL=parse-node-directive.test.js.map