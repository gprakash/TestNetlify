"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const create_connect_and_params_1 = __importDefault(require("./create-connect-and-params"));
const create_disconnect_and_params_1 = __importDefault(require("./create-disconnect-and-params"));
const create_create_and_params_1 = __importDefault(require("./create-create-and-params"));
const constants_1 = require("../constants");
const create_delete_and_params_1 = __importDefault(require("./create-delete-and-params"));
const create_auth_param_1 = __importDefault(require("./create-auth-param"));
const create_auth_and_params_1 = __importDefault(require("./create-auth-and-params"));
const create_set_relationship_properties_1 = __importDefault(require("./create-set-relationship-properties"));
const create_connection_where_and_params_1 = __importDefault(require("./where/create-connection-where-and-params"));
const map_to_db_property_1 = __importDefault(require("../utils/map-to-db-property"));
function createUpdateAndParams({ updateInput, varName, node, parentVar, chainStr, insideDoWhen, withVars, context, parameterPrefix, }) {
    let hasAppliedTimeStamps = false;
    function reducer(res, [key, value]) {
        let param;
        if (chainStr) {
            param = `${chainStr}_${key}`;
        }
        else {
            param = `${parentVar}_update_${key}`;
        }
        const relationField = node.relationFields.find((x) => key === x.fieldName);
        const pointField = node.pointFields.find((x) => key === x.fieldName);
        const dbFieldName = map_to_db_property_1.default(node, key);
        if (relationField) {
            const refNodes = [];
            const relationship = context.neoSchema.relationships.find((x) => x.properties === relationField.properties);
            if (relationField.union) {
                Object.keys(value).forEach((unionTypeName) => {
                    refNodes.push(context.neoSchema.nodes.find((x) => x.name === unionTypeName));
                });
            }
            else {
                refNodes.push(context.neoSchema.nodes.find((x) => x.name === relationField.typeMeta.name));
            }
            const inStr = relationField.direction === "IN" ? "<-" : "-";
            const outStr = relationField.direction === "OUT" ? "->" : "-";
            refNodes.forEach((refNode) => {
                const v = relationField.union ? value[refNode.name] : value;
                const updates = relationField.typeMeta.array ? v : [v];
                updates.forEach((update, index) => {
                    const relationshipVariable = `${varName}_${relationField.type.toLowerCase()}${index}_relationship`;
                    const relTypeStr = `[${relationshipVariable}:${relationField.type}]`;
                    const _varName = `${varName}_${key}${relationField.union ? `_${refNode.name}` : ""}${index}`;
                    if (update.update) {
                        if (withVars) {
                            res.strs.push(`WITH ${withVars.join(", ")}`);
                        }
                        const labels = refNode.labelString;
                        res.strs.push(`OPTIONAL MATCH (${parentVar})${inStr}${relTypeStr}${outStr}(${_varName}${labels})`);
                        const whereStrs = [];
                        if (update.where) {
                            const where = create_connection_where_and_params_1.default({
                                whereInput: update.where,
                                node: refNode,
                                nodeVariable: _varName,
                                relationship,
                                relationshipVariable,
                                context,
                                parameterPrefix: `${parameterPrefix}.${key}${relationField.union ? `.${refNode.name}` : ""}${relationField.typeMeta.array ? `[${index}]` : ``}.where`,
                            });
                            const [whereClause] = where;
                            whereStrs.push(whereClause);
                        }
                        if (node.auth) {
                            const whereAuth = create_auth_and_params_1.default({
                                operation: "UPDATE",
                                entity: refNode,
                                context,
                                where: { varName: _varName, node: refNode },
                            });
                            if (whereAuth[0]) {
                                whereStrs.push(whereAuth[0]);
                                res.params = Object.assign(Object.assign({}, res.params), whereAuth[1]);
                            }
                        }
                        if (whereStrs.length) {
                            res.strs.push(`WHERE ${whereStrs.join(" AND ")}`);
                        }
                        if (update.update.node) {
                            res.strs.push(`CALL apoc.do.when(${_varName} IS NOT NULL, ${insideDoWhen ? '\\"' : '"'}`);
                            const auth = create_auth_param_1.default({ context });
                            let innerApocParams = { auth };
                            const updateAndParams = createUpdateAndParams({
                                context,
                                node: refNode,
                                updateInput: update.update.node,
                                varName: _varName,
                                withVars: [...withVars, _varName],
                                parentVar: _varName,
                                chainStr: `${param}${relationField.union ? `_${refNode.name}` : ""}${index}`,
                                insideDoWhen: true,
                                parameterPrefix: `${parameterPrefix}.${key}${relationField.union ? `.${refNode.name}` : ""}${relationField.typeMeta.array ? `[${index}]` : ``}.update.node`,
                            });
                            res.params = Object.assign(Object.assign(Object.assign({}, res.params), updateAndParams[1]), { auth });
                            innerApocParams = Object.assign(Object.assign({}, innerApocParams), updateAndParams[1]);
                            const updateStrs = [updateAndParams[0], "RETURN count(*)"];
                            const apocArgs = `{${withVars.map((withVar) => `${withVar}:${withVar}`).join(", ")}, ${parameterPrefix === null || parameterPrefix === void 0 ? void 0 : parameterPrefix.split(".")[0]}: $${parameterPrefix === null || parameterPrefix === void 0 ? void 0 : parameterPrefix.split(".")[0]}, ${_varName}:${_varName}REPLACE_ME}`;
                            if (insideDoWhen) {
                                updateStrs.push(`\\", \\"\\", ${apocArgs})`);
                            }
                            else {
                                updateStrs.push(`", "", ${apocArgs})`);
                            }
                            updateStrs.push("YIELD value as _");
                            const paramsString = Object.keys(innerApocParams)
                                .reduce((r, k) => [...r, `${k}:$${k}`], [])
                                .join(",");
                            const updateStr = updateStrs.join("\n").replace(/REPLACE_ME/g, `, ${paramsString}`);
                            res.strs.push(updateStr);
                        }
                        if (update.update.edge) {
                            res.strs.push(`CALL apoc.do.when(${relationshipVariable} IS NOT NULL, ${insideDoWhen ? '\\"' : '"'}`);
                            const setProperties = create_set_relationship_properties_1.default({
                                properties: update.update.edge,
                                varName: relationshipVariable,
                                relationship,
                                operation: "UPDATE",
                                parameterPrefix: `${parameterPrefix}.${key}${relationField.union ? `.${refNode.name}` : ""}[${index}].update.edge`,
                            });
                            const updateStrs = [setProperties, "RETURN count(*)"];
                            const apocArgs = `{${relationshipVariable}:${relationshipVariable}, ${parameterPrefix === null || parameterPrefix === void 0 ? void 0 : parameterPrefix.split(".")[0]}: $${parameterPrefix === null || parameterPrefix === void 0 ? void 0 : parameterPrefix.split(".")[0]}}`;
                            if (insideDoWhen) {
                                updateStrs.push(`\\", \\"\\", ${apocArgs})`);
                            }
                            else {
                                updateStrs.push(`", "", ${apocArgs})`);
                            }
                            updateStrs.push(`YIELD value as ${relationshipVariable}_${key}${index}_edge`);
                            res.strs.push(updateStrs.join("\n"));
                        }
                    }
                    if (update.disconnect) {
                        const disconnectAndParams = create_disconnect_and_params_1.default({
                            context,
                            refNode,
                            value: update.disconnect,
                            varName: `${_varName}_disconnect`,
                            withVars,
                            parentVar,
                            relationField,
                            labelOverride: relationField.union ? refNode.name : "",
                            parentNode: node,
                            insideDoWhen,
                            parameterPrefix: `${parameterPrefix}.${key}${relationField.union ? `.${refNode.name}` : ""}${relationField.typeMeta.array ? `[${index}]` : ""}.disconnect`,
                        });
                        res.strs.push(disconnectAndParams[0]);
                        res.params = Object.assign(Object.assign({}, res.params), disconnectAndParams[1]);
                    }
                    if (update.connect) {
                        const connectAndParams = create_connect_and_params_1.default({
                            context,
                            refNode,
                            value: update.connect,
                            varName: `${_varName}_connect`,
                            withVars,
                            parentVar,
                            relationField,
                            labelOverride: relationField.union ? refNode.name : "",
                            parentNode: node,
                            insideDoWhen,
                        });
                        res.strs.push(connectAndParams[0]);
                        res.params = Object.assign(Object.assign({}, res.params), connectAndParams[1]);
                    }
                    if (update.delete) {
                        const innerVarName = `${_varName}_delete`;
                        const deleteAndParams = create_delete_and_params_1.default({
                            context,
                            node,
                            deleteInput: { [key]: update.delete },
                            varName: innerVarName,
                            chainStr: innerVarName,
                            parentVar,
                            withVars,
                            insideDoWhen,
                            parameterPrefix: `${parameterPrefix}.${key}${relationField.typeMeta.array ? `[${index}]` : ``}.delete`,
                            recursing: true,
                        });
                        res.strs.push(deleteAndParams[0]);
                        res.params = Object.assign(Object.assign({}, res.params), deleteAndParams[1]);
                    }
                    if (update.create) {
                        if (withVars) {
                            res.strs.push(`WITH ${withVars.join(", ")}`);
                        }
                        const creates = relationField.typeMeta.array ? update.create : [update.create];
                        creates.forEach((create, i) => {
                            const baseName = `${_varName}_create${i}`;
                            const nodeName = `${baseName}_node`;
                            const propertiesName = `${baseName}_relationship`;
                            const createAndParams = create_create_and_params_1.default({
                                context,
                                node: refNode,
                                input: create.node,
                                varName: nodeName,
                                withVars: [...withVars, nodeName],
                                insideDoWhen,
                            });
                            res.strs.push(createAndParams[0]);
                            res.params = Object.assign(Object.assign({}, res.params), createAndParams[1]);
                            res.strs.push(`MERGE (${parentVar})${inStr}[${create.edge ? propertiesName : ""}:${relationField.type}]${outStr}(${nodeName})`);
                            if (create.edge) {
                                const setA = create_set_relationship_properties_1.default({
                                    properties: create.edge,
                                    varName: propertiesName,
                                    relationship,
                                    operation: "CREATE",
                                    parameterPrefix: `${parameterPrefix}.${key}${relationField.union ? `.${refNode.name}` : ""}[${index}].create[${i}].edge`,
                                });
                                res.strs.push(setA);
                            }
                        });
                    }
                });
            });
            return res;
        }
        if (!hasAppliedTimeStamps) {
            const timestampedFields = node.temporalFields.filter((temporalField) => {
                var _a;
                return ["DateTime", "Time"].includes(temporalField.typeMeta.name) && ((_a = temporalField.timestamps) === null || _a === void 0 ? void 0 : _a.includes("UPDATE"));
            });
            timestampedFields.forEach((field) => {
                // DateTime -> datetime(); Time -> time()
                res.strs.push(`SET ${varName}.${field.dbPropertyName} = ${field.typeMeta.name.toLowerCase()}()`);
            });
            hasAppliedTimeStamps = true;
        }
        const settableField = node.mutableFields.find((x) => x.fieldName === key);
        const authableField = node.authableFields.find((x) => x.fieldName === key);
        if (settableField) {
            if (pointField) {
                if (pointField.typeMeta.array) {
                    res.strs.push(`SET ${varName}.${dbFieldName} = [p in $${param} | point(p)]`);
                }
                else {
                    res.strs.push(`SET ${varName}.${dbFieldName} = point($${param})`);
                }
            }
            else {
                res.strs.push(`SET ${varName}.${dbFieldName} = $${param}`);
            }
            res.params[param] = value;
        }
        if (authableField) {
            if (authableField.auth) {
                const preAuth = create_auth_and_params_1.default({
                    entity: authableField,
                    operation: "UPDATE",
                    context,
                    allow: { varName, parentNode: node, chainStr: param },
                    escapeQuotes: Boolean(insideDoWhen),
                });
                const postAuth = create_auth_and_params_1.default({
                    entity: authableField,
                    operation: "UPDATE",
                    skipRoles: true,
                    skipIsAuthenticated: true,
                    context,
                    bind: { parentNode: node, varName, chainStr: param },
                    escapeQuotes: Boolean(insideDoWhen),
                });
                if (!res.meta) {
                    res.meta = { preAuthStrs: [], postAuthStrs: [] };
                }
                if (preAuth[0]) {
                    res.meta.preAuthStrs.push(preAuth[0]);
                    res.params = Object.assign(Object.assign({}, res.params), preAuth[1]);
                }
                if (postAuth[0]) {
                    res.meta.postAuthStrs.push(postAuth[0]);
                    res.params = Object.assign(Object.assign({}, res.params), postAuth[1]);
                }
            }
        }
        return res;
    }
    // eslint-disable-next-line prefer-const
    let { strs, params, meta = { preAuthStrs: [], postAuthStrs: [] } } = Object.entries(updateInput).reduce(reducer, {
        strs: [],
        params: {},
    });
    let preAuthStrs = [];
    let postAuthStrs = [];
    const withStr = `WITH ${withVars.join(", ")}`;
    const preAuth = create_auth_and_params_1.default({
        entity: node,
        context,
        allow: { parentNode: node, varName },
        operation: "UPDATE",
        escapeQuotes: Boolean(insideDoWhen),
    });
    if (preAuth[0]) {
        preAuthStrs.push(preAuth[0]);
        params = Object.assign(Object.assign({}, params), preAuth[1]);
    }
    const postAuth = create_auth_and_params_1.default({
        entity: node,
        context,
        skipIsAuthenticated: true,
        skipRoles: true,
        operation: "UPDATE",
        bind: { parentNode: node, varName },
        escapeQuotes: Boolean(insideDoWhen),
    });
    if (postAuth[0]) {
        postAuthStrs.push(postAuth[0]);
        params = Object.assign(Object.assign({}, params), postAuth[1]);
    }
    if (meta) {
        preAuthStrs = [...preAuthStrs, ...meta.preAuthStrs];
        postAuthStrs = [...postAuthStrs, ...meta.postAuthStrs];
    }
    let preAuthStr = "";
    let postAuthStr = "";
    const forbiddenString = insideDoWhen ? `\\"${constants_1.AUTH_FORBIDDEN_ERROR}\\"` : `"${constants_1.AUTH_FORBIDDEN_ERROR}"`;
    if (preAuthStrs.length) {
        const apocStr = `CALL apoc.util.validate(NOT(${preAuthStrs.join(" AND ")}), ${forbiddenString}, [0])`;
        preAuthStr = `${withStr}\n${apocStr}`;
    }
    if (postAuthStrs.length) {
        const apocStr = `CALL apoc.util.validate(NOT(${postAuthStrs.join(" AND ")}), ${forbiddenString}, [0])`;
        postAuthStr = `${withStr}\n${apocStr}`;
    }
    const str = `${preAuthStr}\n${strs.join("\n")}\n${postAuthStr}`;
    return [str, params];
}
exports.default = createUpdateAndParams;
//# sourceMappingURL=create-update-and-params.js.map