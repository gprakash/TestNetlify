"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const create_point_element_1 = __importDefault(require("./create-point-element"));
describe("createPointElement", () => {
    test("returns projection element for single point value", () => {
        const resolveTree = {
            name: "point",
            alias: "point",
            args: {},
            fieldsByTypeName: {
                Point: {
                    crs: {
                        alias: "crs",
                        name: "crs",
                        args: {},
                        fieldsByTypeName: {},
                    },
                    point: {
                        alias: "point",
                        name: "point",
                        args: {},
                        fieldsByTypeName: {},
                    },
                },
            },
        };
        const field = {
            // @ts-ignore
            typeMeta: {
                name: "Point",
            },
        };
        const element = create_point_element_1.default({
            resolveTree,
            field,
            variable: "this",
        });
        expect(element).toEqual("point: { point: this.point, crs: this.point.crs }");
    });
    test("returns projection element for array of point values", () => {
        const resolveTree = {
            name: "points",
            alias: "points",
            args: {},
            fieldsByTypeName: {
                Point: {
                    crs: {
                        alias: "crs",
                        name: "crs",
                        args: {},
                        fieldsByTypeName: {},
                    },
                    point: {
                        alias: "point",
                        name: "point",
                        args: {},
                        fieldsByTypeName: {},
                    },
                },
            },
        };
        const field = {
            // @ts-ignore
            typeMeta: {
                name: "Point",
                array: true,
            },
        };
        const element = create_point_element_1.default({
            resolveTree,
            field,
            variable: "this",
        });
        expect(element).toEqual("points: [p in this.points | { point:p, crs: p.crs }]");
    });
});
//# sourceMappingURL=create-point-element.test.js.map