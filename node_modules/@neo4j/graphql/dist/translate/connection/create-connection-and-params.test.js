"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_relay_1 = require("graphql-relay");
const dedent_1 = __importDefault(require("dedent"));
const utils_1 = require("ts-jest/utils");
const create_connection_and_params_1 = __importDefault(require("./create-connection-and-params"));
const Neo4jGraphQL_1 = __importDefault(require("../../classes/Neo4jGraphQL"));
const test_1 = require("../../utils/test");
jest.mock("../../classes/Neo4jGraphQL");
describe("createConnectionAndParams", () => {
    test("Returns entry with no args", () => {
        // @ts-ignore
        const mockedNeo4jGraphQL = utils_1.mocked(new Neo4jGraphQL_1.default(), true);
        mockedNeo4jGraphQL.nodes = [
            // @ts-ignore
            new test_1.NodeBuilder({
                name: "Actor",
            }).instance(),
        ];
        // @ts-ignore
        mockedNeo4jGraphQL.relationships = [
            // @ts-ignore
            {
                name: "MovieActorsRelationship",
                temporalFields: [],
                enumFields: [],
                ignoredFields: [],
                pointFields: [],
                primitiveFields: [],
                scalarFields: [],
            },
        ];
        const resolveTree = {
            alias: "actorsConnection",
            name: "actorsConnection",
            args: {},
            fieldsByTypeName: {
                MovieActorsConnection: {
                    edges: {
                        alias: "edges",
                        name: "edges",
                        args: {},
                        fieldsByTypeName: {
                            MovieActorsRelationship: {
                                screenTime: {
                                    alias: "screenTime",
                                    name: "screenTime",
                                    args: {},
                                    fieldsByTypeName: {},
                                },
                            },
                        },
                    },
                },
            },
        };
        // @ts-ignore
        const field = {
            fieldName: "actorsConnection",
            relationshipTypeName: "MovieActorsRelationship",
            // @ts-ignore
            typeMeta: {
                name: "MovieActorsConnection",
                required: true,
            },
            otherDirectives: [],
            // @ts-ignore
            relationship: {
                fieldName: "actors",
                type: "ACTED_IN",
                direction: "IN",
                // @ts-ignore
                typeMeta: {
                    name: "Actor",
                },
            },
        };
        // @ts-ignore
        const context = { neoSchema: mockedNeo4jGraphQL };
        const entry = create_connection_and_params_1.default({ resolveTree, field, context, nodeVariable: "this" });
        expect(dedent_1.default(entry[0])).toEqual(dedent_1.default `CALL {
        WITH this
        MATCH (this)<-[this_acted_in_relationship:ACTED_IN]-(this_actor:Actor)
        WITH collect({ screenTime: this_acted_in_relationship.screenTime }) AS edges
        RETURN { edges: edges, totalCount: size(edges) } AS actorsConnection
        }`);
    });
    test("Returns entry with sort arg", () => {
        // @ts-ignore
        const mockedNeo4jGraphQL = utils_1.mocked(new Neo4jGraphQL_1.default(), true);
        mockedNeo4jGraphQL.nodes = [
            // @ts-ignore
            new test_1.NodeBuilder({
                name: "Actor",
            }).instance(),
        ];
        // @ts-ignore
        mockedNeo4jGraphQL.relationships = [
            // @ts-ignore
            {
                name: "MovieActorsRelationship",
                temporalFields: [],
                enumFields: [],
                ignoredFields: [],
                pointFields: [],
                primitiveFields: [],
                scalarFields: [],
            },
        ];
        const resolveTree = {
            alias: "actorsConnection",
            name: "actorsConnection",
            args: {
                sort: [
                    {
                        node: {
                            name: "ASC",
                        },
                        edge: {
                            screenTime: "DESC",
                        },
                    },
                ],
            },
            fieldsByTypeName: {
                MovieActorsConnection: {
                    edges: {
                        alias: "edges",
                        name: "edges",
                        args: {},
                        fieldsByTypeName: {
                            MovieActorsRelationship: {
                                screenTime: {
                                    alias: "screenTime",
                                    name: "screenTime",
                                    args: {},
                                    fieldsByTypeName: {},
                                },
                            },
                        },
                    },
                },
            },
        };
        // @ts-ignore
        const field = {
            fieldName: "actorsConnection",
            relationshipTypeName: "MovieActorsRelationship",
            // @ts-ignore
            typeMeta: {
                name: "MovieActorsConnection",
                required: true,
            },
            otherDirectives: [],
            // @ts-ignore
            relationship: {
                fieldName: "actors",
                type: "ACTED_IN",
                direction: "IN",
                // @ts-ignore
                typeMeta: {
                    name: "Actor",
                },
            },
        };
        // @ts-ignore
        const context = { neoSchema: mockedNeo4jGraphQL };
        const entry = create_connection_and_params_1.default({ resolveTree, field, context, nodeVariable: "this" });
        expect(dedent_1.default(entry[0])).toEqual(dedent_1.default `CALL {
            WITH this
            MATCH (this)<-[this_acted_in_relationship:ACTED_IN]-(this_actor:Actor)
            WITH this_acted_in_relationship, this_actor
            ORDER BY this_acted_in_relationship.screenTime DESC, this_actor.name ASC
            WITH collect({ screenTime: this_acted_in_relationship.screenTime }) AS edges
            RETURN { edges: edges, totalCount: size(edges) } AS actorsConnection
            }`);
    });
    test("Returns an entry with offset and limit args", () => {
        // @ts-ignore
        const mockedNeo4jGraphQL = utils_1.mocked(new Neo4jGraphQL_1.default(), true);
        // @ts-ignore
        mockedNeo4jGraphQL.nodes = [
            // @ts-ignore
            new test_1.NodeBuilder({
                name: "Actor",
            }).instance(),
        ];
        // @ts-ignore
        mockedNeo4jGraphQL.relationships = [
            // @ts-ignore
            {
                name: "MovieActorsRelationship",
                temporalFields: [],
                enumFields: [],
                ignoredFields: [],
                pointFields: [],
                primitiveFields: [],
                scalarFields: [],
            },
        ];
        const resolveTree = {
            alias: "actorsConnection",
            name: "actorsConnection",
            args: {
                first: 10,
                after: graphql_relay_1.offsetToCursor(10),
            },
            fieldsByTypeName: {
                MovieActorsConnection: {
                    edges: {
                        alias: "edges",
                        name: "edges",
                        args: {},
                        fieldsByTypeName: {
                            MovieActorsRelationship: {
                                screenTime: {
                                    alias: "screenTime",
                                    name: "screenTime",
                                    args: {},
                                    fieldsByTypeName: {},
                                },
                            },
                        },
                    },
                },
            },
        };
        const field = {
            fieldName: "actorsConnection",
            relationshipTypeName: "MovieActorsRelationship",
            // @ts-ignore
            typeMeta: {
                name: "MovieActorsConnection",
                required: true,
            },
            otherDirectives: [],
            // @ts-ignore
            relationship: {
                fieldName: "actors",
                type: "ACTED_IN",
                direction: "IN",
                // @ts-ignore
                typeMeta: {
                    name: "Actor",
                },
            },
        };
        // @ts-ignore
        const context = { neoSchema: mockedNeo4jGraphQL };
        const entry = create_connection_and_params_1.default({ resolveTree, field, context, nodeVariable: "this" });
        expect(dedent_1.default(entry[0])).toEqual(dedent_1.default `CALL {
            WITH this
            MATCH (this)<-[this_acted_in_relationship:ACTED_IN]-(this_actor:Actor)
            WITH collect({ screenTime: this_acted_in_relationship.screenTime }) AS edges
            WITH size(edges) AS totalCount, edges[11..21] AS limitedSelection
            RETURN { edges: limitedSelection, totalCount: totalCount } AS actorsConnection
            }`);
    });
});
//# sourceMappingURL=create-connection-and-params.test.js.map