"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const create_relationship_where_and_params_1 = __importDefault(require("./create-relationship-where-and-params"));
const create_node_where_and_params_1 = __importDefault(require("./create-node-where-and-params"));
function createConnectionWhereAndParams({ whereInput, context, node, nodeVariable, relationship, relationshipVariable, parameterPrefix, }) {
    const reduced = Object.entries(whereInput).reduce((res, [k, v]) => {
        if (["AND", "OR"].includes(k)) {
            const innerClauses = [];
            const innerParams = [];
            v.forEach((o, i) => {
                const or = createConnectionWhereAndParams({
                    whereInput: o,
                    node,
                    nodeVariable,
                    relationship,
                    relationshipVariable,
                    context,
                    parameterPrefix: `${parameterPrefix}.${k}[${i}]`,
                });
                innerClauses.push(`${or[0]}`);
                innerParams.push(or[1]);
            });
            const whereStrs = [...res.whereStrs, `(${innerClauses.filter((clause) => !!clause).join(` ${k} `)})`];
            const params = Object.assign(Object.assign({}, res.params), { [k]: innerParams });
            res = { whereStrs, params };
            return res;
        }
        if (k.startsWith("edge")) {
            const relationshipWhere = create_relationship_where_and_params_1.default({
                whereInput: v,
                relationship,
                relationshipVariable,
                context,
                parameterPrefix: `${parameterPrefix}.${k}`,
            });
            const whereStrs = [
                ...res.whereStrs,
                k === "edge_NOT" ? `(NOT ${relationshipWhere[0]})` : relationshipWhere[0],
            ];
            const params = Object.assign(Object.assign({}, res.params), { [k]: relationshipWhere[1] });
            res = { whereStrs, params };
            return res;
        }
        if (k.startsWith("node") || k.startsWith(node.name)) {
            const nodeWhere = create_node_where_and_params_1.default({
                whereInput: v,
                node,
                nodeVariable,
                context,
                parameterPrefix: `${parameterPrefix}.${k}`,
            });
            const whereStrs = [...res.whereStrs, k.endsWith("_NOT") ? `(NOT ${nodeWhere[0]})` : nodeWhere[0]];
            const params = Object.assign(Object.assign({}, res.params), { [k]: nodeWhere[1] });
            res = { whereStrs, params };
        }
        return res;
    }, { whereStrs: [], params: {} });
    return [reduced.whereStrs.join(" AND "), reduced.params];
}
exports.default = createConnectionWhereAndParams;
//# sourceMappingURL=create-connection-where-and-params.js.map