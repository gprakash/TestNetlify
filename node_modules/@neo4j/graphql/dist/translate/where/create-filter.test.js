"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const create_filter_1 = __importStar(require("./create-filter"));
describe("createFilter", () => {
    const left = "left";
    const right = "right";
    const notFilters = ["INCLUDES", "IN", "CONTAINS", "STARTS_WITH", "ENDS_WITH"];
    const validFilters = [
        ...Object.entries(create_filter_1.Operator).map(([k, v]) => ({
            input: {
                left,
                operator: k,
                right,
            },
            expected: `${left} ${v} ${right}`,
        })),
        ...Object.entries(create_filter_1.Operator)
            .filter(([k]) => notFilters.includes(k))
            .map(([k, v]) => ({
            input: {
                left,
                operator: k,
                right,
                not: true,
            },
            expected: `(NOT ${left} ${v} ${right})`,
        })),
    ];
    validFilters.forEach((valid) => {
        test(`should create filter ${valid.input.operator}`, () => {
            const filter = create_filter_1.default(valid.input);
            expect(filter).toBe(valid.expected);
        });
    });
    const invalidFilters = [
        {
            input: {
                left,
                operator: "UNKNOWN",
                right,
            },
            expectedErrorMessage: `Invalid filter operator UNKNOWN`,
        },
        ...Object.keys(create_filter_1.Operator)
            .filter((k) => !notFilters.includes(k))
            .map((k) => ({
            input: {
                left,
                operator: k,
                right,
                not: true,
            },
            expectedErrorMessage: `Invalid filter operator NOT_${k}`,
        })),
    ];
    invalidFilters.forEach((invalid) => {
        test(`should throw an error for filter ${invalid.input.operator}`, () => {
            expect(() => create_filter_1.default(invalid.input)).toThrow(invalid.expectedErrorMessage);
        });
    });
});
//# sourceMappingURL=create-filter.test.js.map