"use strict";
/*
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const join_predicates_1 = __importDefault(require("./join-predicates"));
const trimmer_1 = __importDefault(require("./trimmer"));
describe("join predicates", () => {
    describe("AND", () => {
        test("it should return empty for an empty predicate list", () => {
            expect(join_predicates_1.default([], "AND")).toBe("");
        });
        test("it should filter singular empty predicates", () => {
            expect(join_predicates_1.default([""], "AND")).toBe("");
        });
        test("it should filter multiple non-empty predicates", () => {
            expect(join_predicates_1.default(["", ""], "AND")).toBe("");
        });
        test("it should return singular non-empty predicates", () => {
            expect(join_predicates_1.default(["", "true", ""], "AND")).toBe("true");
        });
        test("it should join non-empty predicates", () => {
            expect(join_predicates_1.default(["", "true", "", "false"], "AND")).toBe("(true AND false)");
        });
        test("it should return a single predicate as-is", () => {
            expect(join_predicates_1.default(["true"], "AND")).toBe(trimmer_1.default("true"));
        });
        test("it should join predicates and wrap them in parentheses", () => {
            expect(join_predicates_1.default(["true", "false"], "AND")).toBe(trimmer_1.default("(true AND false)"));
        });
        test("it should work with an arbitrary number of predicates", () => {
            expect(join_predicates_1.default(["yes", "no", "maybe"], "AND")).toBe(trimmer_1.default("(yes AND no AND maybe)"));
        });
    });
    describe("OR", () => {
        test("it should return empty for an empty predicate list", () => {
            expect(join_predicates_1.default([], "OR")).toBe("");
        });
        test("it should filter singular empty predicates", () => {
            expect(join_predicates_1.default([""], "OR")).toBe("");
        });
        test("it should filter multiple non-empty predicates", () => {
            expect(join_predicates_1.default(["", ""], "OR")).toBe("");
        });
        test("it should return singular non-empty predicates", () => {
            expect(join_predicates_1.default(["", "true", ""], "OR")).toBe("true");
        });
        test("it should join non-empty predicates", () => {
            expect(join_predicates_1.default(["", "true", "", "false"], "OR")).toBe("((true) OR (false))");
        });
        test("it should return a single predicate as-is", () => {
            expect(join_predicates_1.default(["true"], "OR")).toBe(trimmer_1.default("true"));
        });
        test("it should wrap predicates in parentheses, then join, and wrap in outer parentheses", () => {
            expect(join_predicates_1.default(["true", "false"], "OR")).toBe(trimmer_1.default("((true) OR (false))"));
        });
        test("it should work with an arbitrary number of predicates", () => {
            expect(join_predicates_1.default(["yes", "no", "maybe"], "OR")).toBe(trimmer_1.default("((yes) OR (no) OR (maybe))"));
        });
    });
});
//# sourceMappingURL=join-predicates.test.js.map